[{"id":"f6cd98c9.0f3548","type":"tab","label":"Bhutan","disabled":false,"info":""},{"id":"1aebc35b.0ba08d","type":"comment","z":"f6cd98c9.0f3548","name":"**************************************  RS-485 Converter Section  **************************************","info":"","x":700,"y":40,"wires":[]},{"id":"678f3317.eaadec","type":"catch","z":"f6cd98c9.0f3548","name":"","scope":null,"uncaught":false,"x":111,"y":140,"wires":[["330e96a.9d52f6a"]]},{"id":"bef18987.6b9d38","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"error_Status","propertyType":"msg","rules":[{"t":"eq","v":"retry","vt":"str"},{"t":"eq","v":"moveOnNextDevice","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":110,"y":300,"wires":[["aca3beec.0e2e1"],["da2d7d91.245a7"]]},{"id":"aca3beec.0e2e1","type":"delay","z":"f6cd98c9.0f3548","name":"delay 2000ms","pauseType":"delayv","timeout":"2000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":286,"y":260,"wires":[["761f3e01.ad6cd"]]},{"id":"da2d7d91.245a7","type":"delay","z":"f6cd98c9.0f3548","name":"delay 2000ms","pauseType":"delayv","timeout":"2000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":286,"y":340,"wires":[["d66d12f4.e7a1b"]]},{"id":"761f3e01.ad6cd","type":"function","z":"f6cd98c9.0f3548","name":"","func":"node.warn('Retry to Read')\n// node.warn(global.get('deviceProfile_30_Index'))\n// node.warn(global.get('deviceProfile_30_ReadIndex'))\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":460,"y":268,"wires":[["cc15e9c4.46e788"]]},{"id":"d66d12f4.e7a1b","type":"function","z":"f6cd98c9.0f3548","name":"","func":"// node.warn('Move On Next Device')\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":457,"y":331,"wires":[["cc15e9c4.46e788"]]},{"id":"618de184.9dad1","type":"function","z":"f6cd98c9.0f3548","name":"Error Frunction","func":"\nvar displayError = (deviceProfile, deviceProfile_Index) => {\n    node.warn('displayError')\n    msg.display_Error = 'displayError';\n    let device_Profile = global.get(deviceProfile);\n    let index = global.get(deviceProfile_Index);\n    let profile = device_Profile[index];\n    \n    let data = null;\n    let deviceType = profile.deviceProfile.deviceType;\n    let deviceNo = profile.deviceProfile.deviceNo;\n    let dateTime = msg.timeStamp;\n    \n    msg.payloadData = {\n     request: {\n        \"PlantID\": 172,\n        \"LoggerNo\": 1,\n        \"DeviceType\": deviceType,\n        \"DeviceNo\": deviceNo,\n        \"Data\": data,\n        \"TimeStamp\": dateTime,\n        \"Error\": 1,\n     }\n    }\n}  \n\nvar moveOnNextDevice = (\n            deviceProfile_StoreData,\n            deviceProfile,\n            stop_to_read_deviceProfile_dataPacket,\n            deviceProfile_Count,\n            deviceProfile_Index,\n            deviceProfile_ReadIndex,\n            stop_deviceProfile\n            ) => {\n    node.warn('moveOnNextDevice')\n    msg.error_Status = 'moveOnNextDevice';\n    global.set(deviceProfile_StoreData, []);\n    let device_profile = global.get(deviceProfile);\n    let number_of_device = device_profile.length;\n    \n    global.set(stop_to_read_deviceProfile_dataPacket, false);\n    let deviceCount =  global.get(deviceProfile_Count);\n    deviceCount += 1;\n    global.set(deviceProfile_Count, deviceCount);\n    \n    let index = global.get(deviceProfile_Index);\n    index += 1;\n    global.set(deviceProfile_Index, index);\n    global.set(deviceProfile_ReadIndex, 0);\n    \n    if(deviceCount == number_of_device){\n        node.warn('number_of_device If condition');\n        msg.error_Status = '';\n        global.set(deviceProfile_Count, null);\n        global.set(stop_deviceProfile, false);\n        global.set(stop_to_read_deviceProfile_dataPacket, false);\n    }\n}\n\nlet retryToRead = (\n        deviceProfile_Index,\n        deviceProfile_dataPacket_Count,\n        deviceProfile_errorCount,\n        deviceProfile_StoreData,\n        deviceProfile_ReadIndex,\n        deviceProfile,\n        stop_to_read_deviceProfile_dataPacket,\n        deviceProfile_Count,\n        stop_deviceProfile\n        )  => {\n        let index = global.get(deviceProfile_Index);\n        \n        global.set(deviceProfile_dataPacket_Count, null);\n        \n        // displayError(deviceProfile, deviceProfile_Index);\n            \n            // Calling MoveOnNextDevice Function\n            // moveOnNextDevice(\n            //     deviceProfile_StoreData,\n            //     deviceProfile,\n            //     stop_to_read_deviceProfile_dataPacket,\n            //     deviceProfile_Count,\n            //     deviceProfile_Index,\n            //     deviceProfile_ReadIndex,\n            //     stop_deviceProfile\n            // );\n        \n        let errorCount = global.get(deviceProfile_errorCount) || 0;\n        errorCount += 1;\n        node.warn(errorCount + ' errorCount')\n        global.set(deviceProfile_errorCount, errorCount);\n        \n        if(errorCount == 1){\n            // node.warn('If Block')\n            global.set(deviceProfile_StoreData, []);\n            msg.error_Status = 'retry';\n            global.set(stop_to_read_deviceProfile_dataPacket, true);\n            global.set(deviceProfile_Index, index);\n            global.set(deviceProfile_ReadIndex, 0);   \n        }else {\n            // node.warn('else')\n            displayError(deviceProfile, deviceProfile_Index);\n            global.set(deviceProfile_errorCount, null);\n            \n            // Calling MoveOnNextDevice Function\n            moveOnNextDevice(\n                deviceProfile_StoreData,\n                deviceProfile,\n                stop_to_read_deviceProfile_dataPacket,\n                deviceProfile_Count,\n                deviceProfile_Index,\n                deviceProfile_ReadIndex,\n                stop_deviceProfile\n            );\n        }\n    }\n\n\nlet deviceProfile_ErrorConfig = (number) => {\n        // For RetryToRead function Configration\n        let deviceProfile_Index = `deviceProfile_${number}_Index`;\n        let deviceProfile_dataPacket_Count = `deviceProfile_${number}_dataPacket_Count`;\n        let deviceProfile_errorCount = `deviceProfile_${number}_errorCount`;\n        let deviceProfile_StoreData = `deviceProfile_${number}_StoreData`;\n        let deviceProfile_ReadIndex = `deviceProfile_${number}_ReadIndex`;\n        \n        // For DisplayError function Configration\n        let deviceProfile = `deviceProfile_${number}`;\n        \n        // For MoveOnNextDevice function Configration\n        let stop_to_read_deviceProfile_dataPacket = `stop_to_read_deviceProfile_${number}_dataPacket`;\n        let deviceProfile_Count = `deviceProfile_${number}_Count`;\n        let stop_deviceProfile = `stop_deviceProfile_${number}`;\n        \n        // Calling RetryToRead\n        retryToRead(\n            deviceProfile_Index,\n            deviceProfile_dataPacket_Count,\n            deviceProfile_errorCount,\n            deviceProfile_StoreData,\n            deviceProfile_ReadIndex,\n            deviceProfile,\n            stop_to_read_deviceProfile_dataPacket,\n            deviceProfile_Count,\n            stop_deviceProfile\n        );\n}\n\n\nvar identity_Node_To_Pink_RetryOrMoveOnNextDevice = (number) => {\n         if(msg.error_Status == 'retry'){\n            msg.retry_or_moveOnNextDevice = `RD_Profile${number}`;\n        }\n        if(msg.error_Status == 'moveOnNextDevice'){\n            msg.retry_or_moveOnNextDevice = `RD_Profile${number}`;\n        }\n}\n\nif(msg.error.source.name == \"192.168.1.10\"){\n    if(msg.error.message == \"[object Object]\" || msg.error.message == \"Error: Timed out\" || msg.error.message == \"Error: Client Not Ready To Read At State init\" || msg.error.message == \"Error: Modbus exception 11: Unknown error\"){\n        \n    let slaveID = msg.payload.unitid;\n    \n    // Inverter-1\n    if(slaveID == 2){\n        node.warn('Error Occur in INV-1');\n        deviceProfile_ErrorConfig(1);\n        identity_Node_To_Pink_RetryOrMoveOnNextDevice(1);\n    }\n}\n}\n\nif(msg.error.source.name == \"192.168.1.20\"){\n    if(msg.error.message == \"[object Object]\" || msg.error.message == \"Error: Timed out\" || msg.error.message == \"Error: Client Not Ready To Read At State init\"){\n    let slaveID = msg.payload.unitid;\n    \n    // Inverter-3\n    if(slaveID == 1){\n        node.warn('Error Occur in INV-3');\n        deviceProfile_ErrorConfig(2);\n        identity_Node_To_Pink_RetryOrMoveOnNextDevice(2);\n    }\n}\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":778,"y":140,"wires":[["bef18987.6b9d38","12eac9f1.1f96c6"]]},{"id":"330e96a.9d52f6a","type":"debug","z":"f6cd98c9.0f3548","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":350,"y":80,"wires":[]},{"id":"e9c31517.129628","type":"moment","z":"f6cd98c9.0f3548","name":"","topic":"","input":"","inputType":"date","inTz":"Asia/Calcutta","adjAmount":0,"adjType":"days","adjDir":"add","format":"YYYY-MM-DD HH:mm:ss","locale":"en-US","output":"timeStamp","outputType":"msg","outTz":"Asia/Calcutta","x":580,"y":140,"wires":[["618de184.9dad1"]]},{"id":"12eac9f1.1f96c6","type":"switch","z":"f6cd98c9.0f3548","name":"Display Error","property":"display_Error","propertyType":"msg","rules":[{"t":"eq","v":"displayError","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":987,"y":140,"wires":[["3cf64990.82dba6"]]},{"id":"3cf64990.82dba6","type":"debug","z":"f6cd98c9.0f3548","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payloadData","targetType":"msg","statusVal":"","statusType":"auto","x":1171,"y":140,"wires":[]},{"id":"cc15e9c4.46e788","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"retry_or_moveOnNextDevice","propertyType":"msg","rules":[{"t":"eq","v":"RD_Profile1","vt":"str"},{"t":"eq","v":"RD_Profile2","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":609,"y":300,"wires":[["eb18a84b.995628"],["8dabedfe.3dad1"]]},{"id":"6173f123.bede6","type":"function","z":"f6cd98c9.0f3548","name":"Dp-1 INV D-1,D-2,D-3 MET D-1,P-Id=101","func":"var deviceProfile_1 = [\n    {\n        deviceName: \"Inverter-1\",\n        deviceProfile: {\n            deviceNo: 1,\n            deviceType: 53\n        },\n        read: {\n            slaveID: 2,\n            regAdd: [\n                    {\n                        fc: 3,\n                        address: 0,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 11,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 21,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 31,\n                        quantity: 10\n                    }\n                ]\n        }\n    },\n   \n    ]\n\nglobal.set('deviceProfile_1', deviceProfile_1);\nglobal.set('deviceProfile_1_Index', 0);\nglobal.set('deviceProfile_1_ReadIndex', 0);\nglobal.set('deviceProfile_1_StoreData', []);\nglobal.set(\"deviceProfile_1_Count\", 0);\nglobal.set(\"deviceProfile_1_dataPacket_Count\", null);\n\n// URL Server section\nglobal.set('stop_to_read_deviceProfile_1', true);\nglobal.set('stop_on_http_request', true);\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":660,"wires":[["d818b4eb.25dc88"]]},{"id":"d818b4eb.25dc88","type":"function","z":"f6cd98c9.0f3548","name":"Read Device Profile-1","func":"var readData = (fc, slaveID, address, quantity) => {\n        msg.payload = {\n        'fc': fc,\n        'unitid': slaveID,\n        'address': address, \n        'quantity': quantity\n} \n}\n\nvar device_Profile = global.get('deviceProfile_1');\nvar index = global.get('deviceProfile_1_Index');\nvar profile = device_Profile[index];\n\nvar regAdd = profile.read.regAdd;\nvar readIndex = global.get('deviceProfile_1_ReadIndex');\nvar readValue = regAdd[readIndex];\n\nnode.warn(`Dp-1 Start Read Data Packet ${readIndex + 1}`)\n\nvar slaveID = profile.read.slaveID;\n// var slaveID = 2\nvar fc = readValue.fc;\n// var fc = 3\nvar address = readValue.address;\nvar quantity = readValue.quantity;\n\nglobal.set('send_Data_deviceProfile_1', false);\nreadData(fc, slaveID, address, quantity);\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":800,"y":659,"wires":[["de62cece.354c3"]]},{"id":"de62cece.354c3","type":"modbus-flex-getter","z":"f6cd98c9.0f3548","name":"192.168.1.10","showStatusActivities":true,"showErrors":true,"logIOActivities":false,"server":"fc0ec678.cf0118","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"keepMsgProperties":false,"x":1008,"y":659,"wires":[["25898648.c2754a"],[]]},{"id":"25898648.c2754a","type":"delay","z":"f6cd98c9.0f3548","name":"delay 1000ms","pauseType":"delayv","timeout":"1000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1217,"y":656,"wires":[["7155af1.c39825"]]},{"id":"f276f013.4913d","type":"moment","z":"f6cd98c9.0f3548","name":"","topic":"","input":"","inputType":"date","inTz":"Asia/Calcutta","adjAmount":0,"adjType":"days","adjDir":"add","format":"YYYY-MM-DD HH:mm:ss","locale":"en-US","output":"timeStamp","outputType":"msg","outTz":"Asia/Calcutta","x":1601,"y":656,"wires":[["e3061c6a.0efdd"]]},{"id":"e3061c6a.0efdd","type":"function","z":"f6cd98c9.0f3548","name":"Display data DeviceProfile-1","func":"var device_profile = global.get('deviceProfile_1');\nvar number_of_device = device_profile.length;\n\nvar index = global.get('deviceProfile_1_Index');\nvar profile = device_profile[index];\nvar regAdd =  profile.read.regAdd;\nvar number_Of_DataPacket = regAdd.length;\n\nglobal.set('stop_to_read_deviceProfile_1_dataPacket', false);\n\nvar dataPacket_Count =  global.get(\"deviceProfile_1_dataPacket_Count\") || 0;\n    dataPacket_Count += 1;\n    global.set('deviceProfile_1_dataPacket_Count', dataPacket_Count);\n\nvar displayData = () => {\n    let errorCount = global.get('deviceProfile_1_errorCount');\n    if(errorCount == 1){\n    node.warn('Data read successfully After Retry DeviceProfile-1')\n    global.set('deviceProfile_1_errorCount', null);\n    }\n    \n    let data = [];\n    let getStoreData = global.get('deviceProfile_1_StoreData');\n    \n    getStoreData.forEach(item => {\n        item.forEach(value => {\n            data.push(value);\n        })\n    })\n    \n    let finalData = data.toString();\n    let deviceType = profile.deviceProfile.deviceType;\n    let deviceNo = profile.deviceProfile.deviceNo;\n    let dateTime = msg.timeStamp;\n    \n    msg.payloadData = {\n     request: {\n        \"PlantID\": 172,\n        \"LoggerNo\": 1,\n        \"DeviceType\": deviceType,\n        \"DeviceNo\": deviceNo,\n        \"Data\": finalData,\n        \"TimeStamp\": dateTime,\n        \"Error\": 0,\n        \"DataLength\": data.length\n     }\n    }\n    global.set('deviceProfile_1_StoreData', []);\n}   \n\nvar storeData = () => {\n    // msg.payload = [1,2,3,4,5];\n    let getStoreData = global.get('deviceProfile_1_StoreData');\n    getStoreData.push(msg.payload);\n    global.set('deviceProfile_1_StoreData', getStoreData);\n}\n\nif(dataPacket_Count != number_Of_DataPacket){\n  // Storing Data  \n  storeData();\n  let index = global.get('deviceProfile_1_ReadIndex');\n  index += 1;  \n  global.set('deviceProfile_1_ReadIndex', index);  \n  global.set('stop_deviceProfile_1', false);\n  global.set('stop_to_read_deviceProfile_1_dataPacket', true);\n\n}else {\n    // Storing Data  \n    storeData();\n    global.set('stop_to_read_deviceProfile_1_dataPacket', false);\n    global.set('deviceProfile_1_ReadIndex', 0);\n    global.set(\"deviceProfile_1_dataPacket_Count\", null);\n    global.set('send_Data_deviceProfile_1', true);\n    // display Data\n    displayData();\n    \n    // Number of Device Loop\n    var deviceCount =  global.get(\"deviceProfile_1_Count\");\n    deviceCount += 1;\n    global.set('deviceProfile_1_Count', deviceCount);\n    \n    if(deviceCount != number_of_device ){\n        let index = global.get('deviceProfile_1_Index');\n        index += 1;\n        global.set('deviceProfile_1_Index', index);\n        global.set('stop_deviceProfile_1', true);\n        global.set('stop_to_read_deviceProfile_1_dataPacket', false);\n    }else {\n        global.set('stop_to_read_deviceProfile_1_dataPacket', false);\n        global.set('stop_deviceProfile_1', false);\n        global.set('deviceProfile_1_Count', null);\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1859,"y":656,"wires":[["a9999d72.29597"]]},{"id":"a9999d72.29597","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"send_Data_deviceProfile_1","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2071,"y":656,"wires":[["f17e2e6.f19a1d"]]},{"id":"2b1730c3.e6124","type":"complete","z":"f6cd98c9.0f3548","name":"Device Profile-1","scope":["e3061c6a.0efdd"],"uncaught":false,"x":213,"y":524,"wires":[["859c580e.9fcd88"]]},{"id":"859c580e.9fcd88","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"stop_deviceProfile_1","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":373,"y":524,"wires":[["eb18a84b.995628"]]},{"id":"e4f73e95.130b3","type":"complete","z":"f6cd98c9.0f3548","name":"Read Device Profile-1","scope":["e3061c6a.0efdd"],"uncaught":false,"x":213,"y":804,"wires":[["481aa314.e7e6bc"]]},{"id":"ac44019a.b26b1","type":"function","z":"f6cd98c9.0f3548","name":"Dp-2 INV D-4, D-5, D-6 MET D-2, P-Id=101","func":"var deviceProfile_2 = [\n   {\n        deviceName: \"Inverter-1\",\n        deviceProfile: {\n            deviceNo: 2,\n            deviceType: 53\n        },\n        read: {\n            slaveID: 1,\n            regAdd: [\n                    {\n                        fc: 3,\n                        address: 0,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 11,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 21,\n                        quantity: 10\n                    },\n                    {\n                        fc: 3,\n                        address: 31,\n                        quantity: 10\n                    }\n                ]\n        }\n    }\n]\n\nglobal.set('deviceProfile_2', deviceProfile_2);\nglobal.set('deviceProfile_2_Index', 0);\nglobal.set('deviceProfile_2_ReadIndex', 0);\nglobal.set('deviceProfile_2_StoreData', []);\nglobal.set(\"deviceProfile_2_Count\", 0); \nglobal.set(\"deviceProfile_2_dataPacket_Count\", null);\n\n// URL Server section\nglobal.set('stop_to_read_deviceProfile_2', true);\nglobal.set('stop_on_http_request', true);\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":405,"y":718,"wires":[["30d952f1.a3b9be"]]},{"id":"30d952f1.a3b9be","type":"function","z":"f6cd98c9.0f3548","name":"Read Device Profile-2","func":"var readData = (fc, slaveID, address, quantity) => {\n        msg.payload = {\n        'fc': fc,\n        'unitid': slaveID,\n        'address': address, \n        'quantity': quantity\n} \n}\n\nvar device_profile = global.get('deviceProfile_2');\nvar index = global.get('deviceProfile_2_Index');\nvar profile = device_profile[index];\n// node.warn(profile)\nvar regAdd = profile.read.regAdd;\nvar readIndex = global.get('deviceProfile_2_ReadIndex');\nvar readValue = regAdd[readIndex];\n\nnode.warn(`Dp-2 Start Read Data Packet ${readIndex + 1}`)\n\nvar slaveID = profile.read.slaveID;\n// var slaveID = 2\nvar fc = readValue.fc;\nvar address = readValue.address;\nvar quantity = readValue.quantity;\n\nglobal.set('send_Data_deviceProfile_2', false);\nreadData(fc, slaveID, address, quantity);\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":800,"y":719,"wires":[["21ab637b.4b513c"]]},{"id":"21ab637b.4b513c","type":"modbus-flex-getter","z":"f6cd98c9.0f3548","name":"192.168.1.20","showStatusActivities":true,"showErrors":true,"logIOActivities":false,"server":"ed7d5af5.114f58","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"keepMsgProperties":false,"x":1008,"y":720,"wires":[["2daeec7a.8bfb94"],[]]},{"id":"2daeec7a.8bfb94","type":"delay","z":"f6cd98c9.0f3548","name":"delay 1000ms","pauseType":"delayv","timeout":"1000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1217,"y":719,"wires":[["f2dbde49.cb3f9"]]},{"id":"89fafd0c.74ed","type":"moment","z":"f6cd98c9.0f3548","name":"","topic":"","input":"","inputType":"date","inTz":"Asia/Calcutta","adjAmount":0,"adjType":"days","adjDir":"add","format":"YYYY-MM-DD HH:mm:ss","locale":"en-US","output":"timeStamp","outputType":"msg","outTz":"Asia/Calcutta","x":1601,"y":719,"wires":[["2b16231f.59aa9c"]]},{"id":"2b16231f.59aa9c","type":"function","z":"f6cd98c9.0f3548","name":"Display data DeviceProfile-2","func":"var device_profile = global.get('deviceProfile_2');\nvar number_of_device = device_profile.length;\n\nvar index = global.get('deviceProfile_2_Index');\nvar profile = device_profile[index];\nvar regAdd =  profile.read.regAdd;\nvar number_Of_DataPacket = regAdd.length;\n\nglobal.set('stop_to_read_deviceProfile_2_dataPacket', false);\n\nvar dataPacket_Count =  global.get(\"deviceProfile_2_dataPacket_Count\") || 0;\n    dataPacket_Count += 1;\n    global.set('deviceProfile_2_dataPacket_Count', dataPacket_Count);\n\nvar displayData = () => {\n    let errorCount = global.get('deviceProfile_2_errorCount');\n    if(errorCount == 1){\n    node.warn('Data read successfully After Retry DeviceProfile-2')\n    global.set('deviceProfile_2_errorCount', null);\n    }\n    \n    let data = [];\n    let getStoreData = global.get('deviceProfile_2_StoreData');\n    \n    getStoreData.forEach(item => {\n        item.forEach(value => {\n            data.push(value);\n        })\n    })\n    \n    let finalData = data.toString();\n    let deviceType = profile.deviceProfile.deviceType;\n    let deviceNo = profile.deviceProfile.deviceNo;\n    let dateTime = msg.timeStamp;\n    \n    msg.payloadData = {\n     request: {\n        \"PlantID\": 172,\n        \"LoggerNo\": 1,\n        \"DeviceType\": deviceType,\n        \"DeviceNo\": deviceNo,\n        \"Data\": finalData,\n        \"TimeStamp\": dateTime,\n        \"Error\": 0,\n        \"DataLength\": data.length\n     }\n    }\n    global.set('deviceProfile_2_StoreData', []);\n}   \n\nvar storeData = () => {\n    // msg.payload = [1,2,3,4,5];\n    let getStoreData = global.get('deviceProfile_2_StoreData');\n    getStoreData.push(msg.payload);\n    global.set('deviceProfile_2_StoreData', getStoreData);\n}\n\nif(dataPacket_Count != number_Of_DataPacket){\n  // Storing Data  \n  storeData();\n  let index = global.get('deviceProfile_2_ReadIndex');\n  index += 1;  \n  global.set('deviceProfile_2_ReadIndex', index);  \n  global.set('stop_deviceProfile_2', false);\n  global.set('stop_to_read_deviceProfile_2_dataPacket', true);\n\n}else {\n    // Storing Data  \n    storeData();\n    global.set('stop_to_read_deviceProfile_2_dataPacket', false);\n    global.set('deviceProfile_2_ReadIndex', 0);\n    global.set(\"deviceProfile_2_dataPacket_Count\", null);\n    global.set('send_Data_deviceProfile_2', true);\n    // display Data\n    displayData();\n    \n    // Number of Device Loop\n    var deviceCount =  global.get(\"deviceProfile_2_Count\");\n    deviceCount += 1;\n    global.set('deviceProfile_2_Count', deviceCount);\n    \n    if(deviceCount != number_of_device ){\n        let index = global.get('deviceProfile_2_Index');\n        index += 1;\n        global.set('deviceProfile_2_Index', index);\n        global.set('stop_deviceProfile_2', true);\n        global.set('stop_to_read_deviceProfile_2_dataPacket', false);\n    }else {\n        global.set('stop_to_read_deviceProfile_2_dataPacket', false);\n        global.set('stop_deviceProfile_2', false);\n        global.set('deviceProfile_2_Count', null);\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1861,"y":719,"wires":[["2a764512.0b1eaa"]]},{"id":"2a764512.0b1eaa","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"send_Data_deviceProfile_2","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":2071,"y":720,"wires":[["cd152040.eb84a"]]},{"id":"a727a94c.e87848","type":"complete","z":"f6cd98c9.0f3548","name":"Read Device Profile-2","scope":["2b16231f.59aa9c"],"uncaught":false,"x":213,"y":864,"wires":[["23b52d5e.a559d2"]]},{"id":"23b52d5e.a559d2","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"stop_to_read_deviceProfile_2_dataPacket","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":393,"y":864,"wires":[["5baf552d.1191fc"]]},{"id":"5c4bbfb2.56a8","type":"complete","z":"f6cd98c9.0f3548","name":"Device Profile-2","scope":["2b16231f.59aa9c"],"uncaught":false,"x":215,"y":579,"wires":[["b102a59e.470e88"]]},{"id":"b102a59e.470e88","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"stop_deviceProfile_2","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":373,"y":579,"wires":[["8dabedfe.3dad1"]]},{"id":"cd152040.eb84a","type":"debug","z":"f6cd98c9.0f3548","name":"10.102.255.144","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payloadData","targetType":"msg","statusVal":"","statusType":"auto","x":2229,"y":720,"wires":[]},{"id":"f17e2e6.f19a1d","type":"debug","z":"f6cd98c9.0f3548","name":"10.102.255.141","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payloadData","targetType":"msg","statusVal":"","statusType":"auto","x":2228,"y":656,"wires":[]},{"id":"481aa314.e7e6bc","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"stop_to_read_deviceProfile_1_dataPacket","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":395,"y":804,"wires":[["8ae0ffba.500d2"]]},{"id":"61aa2b06.3ed574","type":"debug","z":"f6cd98c9.0f3548","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1590,"y":1100,"wires":[]},{"id":"eb18a84b.995628","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-1 ON OFF","property":"stop_to_read_deviceProfile_1","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":546,"y":524,"wires":[["d818b4eb.25dc88"]]},{"id":"f7d3d0fa.ca59d","type":"comment","z":"f6cd98c9.0f3548","name":"**************************************  URL Server for RS-485 Converter  **************************************","info":"","x":1170,"y":820,"wires":[]},{"id":"9b9a170f.0729a8","type":"function","z":"f6cd98c9.0f3548","name":"URL Server Profile","func":"var URLServerProfile = [\n    {   \n        ip: '192.168.1.10',\n        plantId: 101,\n        deviceNo: 1,\n        slaveId: 2,\n        deviceType: 'Inverter',\n        status: {\n            enabel: false,\n            fc: 3,\n            enableAddress: 10, \n            enableValue: 40, // This Value will be recived from req URL\n            onoffAddress: 2,\n            startValue: 45, \n            stopValue: 89,\n            priority: 1\n        },\n        activePowerDerating: {\n            enabel: true,\n            fc: 3,\n            enableAddress: 3,\n            enableValue: 50, // This Value will be recived from req URL\n            percentAddress: 5,\n            percentScale: 10, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority:2\n        },\n        reactivePowerDerating: {\n            enabel: true,\n            fc: 3,\n            enableAddress: 6,\n            enableValue: 50, // This Value will be recived from req URL\n            percentAddress: 8,\n            percentScale: 10, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority: 3\n        }\n    },\n    {   \n        ip: '192.168.1.20',\n        plantId: 101,\n        deviceNo: 2,\n        slaveId: 1,\n        deviceType: 'Inverter',\n        status: {\n            enabel: false,\n            fc: 3,\n            enableAddress: 10, \n            enableValue: 40, // This Value will be recived from req URL\n            onoffAddress: 2,\n            startValue: 45, \n            stopValue: 89,\n            priority: 1\n        },\n        activePowerDerating: {\n            enabel: true,\n            fc: 3,\n            enableAddress: 3,\n            enableValue: 50, // This Value will be recived from req URL\n            percentAddress: 5,\n            percentScale: 10, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority:2\n        },\n        reactivePowerDerating: {\n            enabel: false,\n            fc: 3,\n            enableAddress: 6,\n            enableValue: 50, // This Value will be recived from req URL\n            percentAddress: 8,\n            percentScale: 10, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority: 3\n        }\n    }\n];\n\nmsg.URLServerProfile = URLServerProfile;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":327,"y":1040,"wires":[["b03ab9b9.3655d8"]]},{"id":"b03ab9b9.3655d8","type":"function","z":"f6cd98c9.0f3548","name":"","func":"node.warn('Got commant from http');\nglobal.set('stop_on_http_request', false);\n\nvar plantId;\nvar deviceNumber;\nvar deviceType;\nvar req;\n\nconst resetGlobalVariable = () => {\n    global.set('req', null);\n    global.set('isInverterOnCmd', null);\n    global.set('isInverterOFFCmd', null);\n    global.set('URLServer_Profile', null);\n    global.set('inverterEnabel', null);\n    global.set('inverterWrite', null);\n    global.set('activePowerDerating_Enabel', null);\n    global.set('activePowerDerating_Write', null);\n    global.set('reactivePowerDerating_Enabel', null);\n    global.set('reactivePowerDerating_Write', null);\n    global.set('allDone', null);\n    global.set('invOffTimeReqType', null);\n    global.set('lastActivityOfWriteValue', null);\n    global.set('stop_url_server_Loop', false);\n}\n\nconst fetchURLServerValue = () => {\n    global.set('req', msg.req);\n    req = msg.req;\n    plantId = req.body.plantId;\n    deviceNumber = req.body.deviceNo;\n    deviceType = req.body.deviceType;\n}\n\nconst getSingleProfile = () => {\n        msg.URLServerProfile.forEach(element => {\n            if(element.deviceNo == deviceNumber && element.deviceType == deviceType && element.plantId == plantId){\n                global.set('URLServer_Profile', element);\n                msg.IP = element.ip;\n            }\n        })\n}\n\nconst checkCommandPriority = () => {\n    const profile = global.get('URLServer_Profile');\n    \n    if(req.body.status !== undefined){\n        if(req.body.status.cmdType === 0){\n            global.set('cmdType', 'InverterOff');\n            if(profile.status.enabel === true){\n                global.set('inverterEnabel',true);\n            }else{\n                global.set('inverterWrite',true);\n            }\n        }\n        \n        if(req.body.status.cmdType === 1){\n            global.set('cmdType', 'InverterOn');\n            if(profile.status.enabel === true){\n                global.set('inverterEnabel',true);\n            }else{\n                global.set('inverterWrite',true);\n            }\n        }\n    }\n    \n    if(req.body.activePowerDerating !== undefined){\n        global.set('cmdType', 'activePowerDerating');\n        if(profile.activePowerDerating.enabel === true){\n            global.set('activePowerDerating_Enabel', true);\n        }else{\n            global.set('activePowerDerating_Write', true);\n        }\n    }\n    \n    if(req.body.reactivePowerDerating !== undefined){\n        global.set('cmdType', 'reactivePowerDerating');\n        if(profile.reactivePowerDerating.enabel === true){\n            global.set('reactivePowerDerating_Enabel', true);\n        }else{\n            global.set('reactivePowerDerating_Write', true);\n        }\n    }\n}\n\nconst identifyNodeToStopFlow = () => {\n    const ip = msg.IP;\n    \n    if(ip == '192.168.1.10'){\n        global.set('stop_to_read_deviceProfile_1', false);\n    }\n    \n    if(ip == '192.168.3.20'){\n        global.set('stop_to_read_deviceProfile_2', false);\n    }\n    \n    if(ip == '192.168.3.30'){\n        global.set('stop_to_read_deviceProfile_3', false);\n    }\n}\n\nresetGlobalVariable();\nfetchURLServerValue();\ngetSingleProfile();\ncheckCommandPriority();\nidentifyNodeToStopFlow();\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":498,"y":1040,"wires":[["96f21f78.9e0ac","899c1efa.5df15"]]},{"id":"8357d752.6b8058","type":"complete","z":"f6cd98c9.0f3548","name":"","scope":["7524d994.11a868"],"uncaught":false,"x":131,"y":1140,"wires":[["ffb8816a.58dee"]]},{"id":"3fb0361a.7ad28a","type":"function","z":"f6cd98c9.0f3548","name":"","func":"var profile = global.get('URLServer_Profile');\nvar inverterEnabel = global.get('inverterEnabel');\nvar inverterWrite = global.get('inverterWrite');\nvar activePowerDeratingEnabel = global.get('activePowerDerating_Enabel');\nvar activePowerDeratingWrite = global.get('activePowerDerating_Write');\nvar reactivePowerDeratingEnabel = global.get('reactivePowerDerating_Enabel');\nvar reactivePowerDeratingWrite = global.get('reactivePowerDerating_Write');\n\nglobal.set('is_http_request_time_error', true);\n\nmsg.IP = profile.ip;\n\nvar req = global.get('req');\nvar slaveId = profile.slaveId;\n\nvar cmdType = global.get('cmdType');\n\nglobal.set('stop_url_server_Loop', true);\n\nconst writeValue = (address, value) => {\n    node.warn(address)\n    node.warn(value)\n    // node.warn(`-----> address ${address}`)\n    // node.warn(`-----> value ${value}`)\n    // node.warn(`-----> slaveId ${slaveId}`)\n    msg.payload = { \n    value: value, \n    'fc': 6, \n    'unitid': slaveId, \n    'address': address,\n    'quantity': 1 \n    }\n}\n\nif(cmdType == 'InverterOff' || cmdType == 'InverterOn'){\n    let onoffAddress = profile.status.onoffAddress;\n    let writeableValue;\n    \n    if(cmdType == 'InverterOff'){\n        writeableValue = profile.status.stopValue;\n    }\n    \n    if(cmdType == 'InverterOn'){\n        writeableValue = profile.status.startValue;\n    }\n    \n    if(profile.status.enabel === true){\n        if(inverterEnabel){\n            node.warn('inverter Enabel');\n            global.set('lastActivityOfWriteValue', 'inverterEnabel');\n            let enableAddress = profile.status.enableAddress;\n            let enableValue = profile.status.enableValue;\n            writeValue(enableAddress, enableValue);\n        }\n\n        if(inverterWrite){\n            node.warn('inverter Write');\n            global.set('lastActivityOfWriteValue', 'inverterWrite');\n            writeValue(onoffAddress, writeableValue);\n            global.set('allDone', true);\n        }\n    }else {\n        if(inverterWrite){\n            node.warn('inverter Write');\n            global.set('lastActivityOfWriteValue', 'inverterWrite');\n            writeValue(onoffAddress, writeableValue);\n            global.set('allDone', true);\n        }\n    }\n}\n\nif(cmdType == 'activePowerDerating'){\n    \n    if(profile.activePowerDerating.enabel === true){\n        if(activePowerDeratingEnabel){\n            node.warn('activePowerDerating Enabel');\n            global.set('lastActivityOfWriteValue', 'activePowerDeratingEnabel');\n            let enableAddress = profile.activePowerDerating.enableAddress;\n            let enableValue = req.body.activePowerDerating.value;\n            writeValue(enableAddress, enableValue);\n            global.set('activePowerDerating_Enabel', false);\n            global.set('activePowerDerating_Write', true);\n        }\n        \n        if(activePowerDeratingWrite){\n            node.warn('activePowerDerating Write');\n            global.set('lastActivityOfWriteValue', 'activePowerDeratingWrite');\n            let percentAddress = profile.activePowerDerating.percentAddress;\n            let writableValue =  profile.activePowerDerating.percentScale * req.body.activePowerDerating.value;\n            writeValue(percentAddress, writableValue);\n            global.set('allDone', true);\n        }\n    }else{\n        if(activePowerDeratingWrite){\n            node.warn('activePowerDerating Write');\n            global.set('lastActivityOfWriteValue', 'activePowerDeratingWrite');\n            let percentAddress = profile.activePowerDerating.percentAddress;\n            let writableValue =  profile.activePowerDerating.percentScale * req.body.activePowerDerating.value;\n            writeValue(percentAddress, writableValue);\n            global.set('allDone', true);\n        }\n    }\n}\n\nif(cmdType == 'reactivePowerDerating'){\n    \n    if(profile.reactivePowerDerating.enabel === true){\n        if(reactivePowerDeratingEnabel){\n            node.warn('reactivePowerDerating Enabel');\n            global.set('lastActivityOfWriteValue', 'reactivePowerDeratingEnabel');\n            let enableAddress = profile.reactivePowerDerating.enableAddress;\n            let enableValue = req.body.reactivePowerDerating.value;\n            writeValue(enableAddress, enableValue);\n            global.set('reactivePowerDerating_Enabel', false);\n            global.set('reactivePowerDerating_Write', true);\n        }\n        \n        if(reactivePowerDeratingWrite){\n            node.warn('reactivePowerDerating Write');\n            global.set('lastActivityOfWriteValue', 'reactivePowerDeratingWrite');\n            let percentAddress = profile.reactivePowerDerating.percentAddress;\n            let writableValue =  profile.reactivePowerDerating.percentScale * req.body.reactivePowerDerating.value;\n            writeValue(percentAddress, writableValue);\n            global.set('allDone', true);\n        }\n    }else{\n        if(reactivePowerDeratingWrite){\n            node.warn('reactivePowerDerating Write');\n            global.set('lastActivityOfWriteValue', 'reactivePowerDeratingWrite');\n            let percentAddress = profile.reactivePowerDerating.percentAddress;\n            let writableValue =  profile.reactivePowerDerating.percentScale * req.body.reactivePowerDerating.value;\n            writeValue(percentAddress, writableValue);\n            global.set('allDone', true);\n        }\n    }\n    \n    \n}\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":842,"y":1040,"wires":[["c0ffbce2.78abc"]]},{"id":"7524d994.11a868","type":"function","z":"f6cd98c9.0f3548","name":"Display URL Server Write Value","func":"var profile = global.get('URLServer_Profile');\nvar inverterEnabel = global.get('inverterEnabel');\nvar inverterWrite = global.get('inverterWrite');\nvar activePowerDeratingEnabel = global.get('activePowerDerating_Enabel');\nvar activePowerDeratingWrite = global.get('activePowerDerating_Write');\nvar reactivePowerDeratingEnabel = global.get('reactivePowerDerating_Enabel');\nvar reactivePowerDeratingWrite = global.get('reactivePowerDerating_Write');\n\n\nvar cmdType = global.get('cmdType');\nvar allDone = global.get('allDone');\n\nconst sendResponse = (res) => {\n    global.set('http_RS_485_successResponse', res);\n}\n\nconst resetGlobalVariable = () => {\n    global.set('req', null);\n    global.set('isInverterOnCmd', null);\n    global.set('isInverterOFFCmd', null);\n    global.set('URLServer_Profile', null);\n    global.set('inverterEnabel', null);\n    global.set('inverterWrite', null);\n    global.set('activePowerDerating_Enabel', null);\n    global.set('activePowerDerating_Write', null);\n    global.set('reactivePowerDerating_Enabel', null);\n    global.set('reactivePowerDerating_Write', null);\n    global.set('allDone', null);\n    global.set('invOffTimeReqType', null);\n    global.set('lastActivityOfWriteValue', null);\n    global.set('stop_url_server_Loop', false);\n}\n\nconst checkFlowMode = () => {\n    const device_profile = global.get('deviceProfile_1');\n    const number_of_device = device_profile.length;\n    var deviceCount =  global.get(\"deviceProfile_1_Count\");\n    \n    if(number_of_device != deviceCount){\n        \n    }\n}\n\nconst identifyNodeToStartFlow = () => {\n    \n    global.set('stop_on_http_request', true);\n    msg.IP = profile.ip;\n    const ip = profile.ip;\n    \n    if(ip == '192.168.1.10'){\n        global.set('stop_to_read_deviceProfile_1', true);\n    }\n    \n    if(ip == '192.168.1.20'){\n        global.set('stop_to_read_deviceProfile_2', true);\n    }\n}\n\nif(cmdType == 'InverterOff' || cmdType == 'InverterOn'){\n    \n    if(profile.status.enabel === true){\n        if(inverterEnabel){\n            global.set('inverterEnabel', false);\n            global.set('inverterWrite', true);\n        }\n    }\n    \n    if(allDone){\n        let res = {\n            status: {\n                success: true\n            }\n        }\n        sendResponse(res);\n        identifyNodeToStartFlow();\n        resetGlobalVariable();\n    }\n}\n\nif(cmdType == 'activePowerDerating'){\n    let res = {\n        activePowerDerating: {\n            success: true\n        }\n    }\n    if(allDone){\n        sendResponse(res);\n        identifyNodeToStartFlow();\n        resetGlobalVariable();\n    }\n}\n\nif(cmdType == 'reactivePowerDerating'){\n    let res = {\n        reactivePowerDerating: {\n            success: true\n        }\n    }\n    if(allDone){\n        sendResponse(res);\n        identifyNodeToStartFlow();\n        resetGlobalVariable();\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1379,"y":1029,"wires":[["3076d98c.3fd8c6","61aa2b06.3ed574"]]},{"id":"ffb8816a.58dee","type":"switch","z":"f6cd98c9.0f3548","name":"Stop URL Server Loop","property":"stop_url_server_Loop","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":327,"y":1140,"wires":[["d7a5c2ba.9c18a"]]},{"id":"d7a5c2ba.9c18a","type":"delay","z":"f6cd98c9.0f3548","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":522,"y":1140,"wires":[["3fb0361a.7ad28a"]]},{"id":"d9b9c1e3.6f725","type":"catch","z":"f6cd98c9.0f3548","name":"","scope":null,"uncaught":false,"x":122,"y":1220,"wires":[["976f6d33.4f633"]]},{"id":"976f6d33.4f633","type":"switch","z":"f6cd98c9.0f3548","name":"Check is_http_request_time_error","property":"is_http_request_time_error","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":344,"y":1220,"wires":[["19953eaf.6dd521"]]},{"id":"19953eaf.6dd521","type":"function","z":"f6cd98c9.0f3548","name":"","func":"var lastActivityOfWriteValue =  global.get('lastActivityOfWriteValue');\nvar profile = global.get('URLServer_Profile');\nvar cmdType = global.get('cmdType');\nglobal.set('http_request_error', true);\nglobal.set('stop_on_http_request', true);\nglobal.set('is_http_request_time_error', false);\n\nvar res = {\n        status: {\n            success: false\n        },\n        activePowerDerating: {\n            success: false\n        },\n        reactivePowerDerating: {\n            success: false\n        }\n    }\n\nconst sendResponse = (res) => {\n    global.set('http_RS_485_errorResponse', res);\n}\n\nconst resetGlobalVariable = () => {\n    global.set('req', null);\n    global.set('isInverterOnCmd', null);\n    global.set('isInverterOFFCmd', null);\n    global.set('URLServer_Profile', null);\n    global.set('inverterEnabel', null);\n    global.set('inverterWrite', null);\n    global.set('activePowerDerating_Enabel', null);\n    global.set('activePowerDerating_Write', null);\n    global.set('reactivePowerDerating_Enabel', null);\n    global.set('reactivePowerDerating_Write', null);\n    global.set('invOffTimeReqType', null);\n    global.set('allDone', null);\n    global.set('lastActivityOfWriteValue', null);\n    global.set('stop_url_server_Loop', false);\n}\n\nconst identifyNodeToStartFlow = () => {\n    msg.IP = profile.ip\n    const ip = profile.ip;\n    \n    if(ip == '192.168.1.10'){\n        global.set('stop_to_read_deviceProfile_1', true);\n    }\n    \n    if(ip == '192.168.3.20'){\n        global.set('stop_to_read_deviceProfile_2', true);\n    }\n}\n\nif(cmdType == 'InverterOff' || cmdType == 'InverterOn'){\n    if(lastActivityOfWriteValue == 'inverterEnabel' || lastActivityOfWriteValue == 'inverterWrite'){\n        delete res.activePowerDerating;\n        delete res.reactivePowerDerating;\n        sendResponse(res);\n    }\n    \n    identifyNodeToStartFlow();\n    resetGlobalVariable();\n    return msg;\n}\n\n\nif(cmdType == 'activePowerDerating'){\n    \n    if(lastActivityOfWriteValue == 'activePowerDeratingEnabel' || lastActivityOfWriteValue == 'activePowerDeratingWrite'){\n        delete res.reactivePowerDerating;\n        delete res.status; \n        sendResponse(res);\n    }\n    \n    identifyNodeToStartFlow();\n    resetGlobalVariable();\n    return msg;\n}\n\nif(cmdType == 'reactivePowerDerating'){\n    \n    if(lastActivityOfWriteValue == 'reactivePowerDeratingEnabel' || lastActivityOfWriteValue == 'reactivePowerDeratingWrite'){\n        delete res.activePowerDerating;\n        delete res.status; \n        sendResponse(res);\n    }\n    \n    identifyNodeToStartFlow();\n    resetGlobalVariable();\n    return msg;\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":567,"y":1220,"wires":[["bfdc20b5.32d52"]]},{"id":"7ab45f8d.bade5","type":"http in","z":"f6cd98c9.0f3548","name":"","url":"/plc","method":"post","upload":false,"swaggerDoc":"","x":1120,"y":2060,"wires":[["188fa1a3.e0bf8e"]]},{"id":"188fa1a3.e0bf8e","type":"function","z":"f6cd98c9.0f3548","name":"URL Server Profile","func":"var URLServerProfile = [\n    {\n        ip: \"192.168.1.10\",\n        deviceNo: 1,\n        slaveId: 6,\n        deviceType: 'Inverter',\n        status: {\n            fc: 3,\n            enableAddress: 0, \n            enableValue: 40, // The Value will be recived from req URL\n            onoffAddress: 12,\n            startValue: 1, \n            stopValue: 0,\n            priority: 1\n        },\n        activePowerDerating: {\n            fc: 3,\n            enableAddress: 3,\n            enableValue: 50, // The Value will be recived from req URL\n            percentAddress: 5,\n            percentScale: 13, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority:2\n        },\n        reactivePowerDerating: {\n            fc: 3,\n            enableAddress: 6,\n            enableValue: 50, // The Value will be recived from req URL\n            percentAddress: 8,\n            percentScale: 10, // Multiplyer, Whatever value will be recived from req URL multiply those value for this Multiplyer\n            priority: 3\n        }\n    }\n];\n\nmsg.URLServerProfile = URLServerProfile;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1295,"y":2060,"wires":[["20258c1.712d874"]]},{"id":"20258c1.712d874","type":"function","z":"f6cd98c9.0f3548","name":"","func":"var deviceNumber;\nvar deviceType;\nvar req;\nvar ip;\n\nconst fetchURLServerValue = () => {\n    global.set('req', msg.req);\n    req = msg.req;\n    ip = req.body.ip;\n    deviceNumber = req.body.deviceNo;\n    deviceType = req.body.deviceType;\n}\n\nconst checkCommandPriority = () => {\n    if(req.body.status !== undefined){\n        if(req.body.status.cmdType == 1){\n            global.set('cmdType', 'InverterOn');\n            global.set('inverterWrite', true);\n            return msg;\n        }\n    }\n    \n    if(req.body.status !== undefined){\n        if(req.body.status.cmdType === 0){\n            global.set('cmdType', 'InverterOff');\n            global.set('inverterWrite', true);\n            return msg;\n        }\n    }\n    \n    \n    \n    // CASE 1\n    // if(req.body.status !== undefined){\n    //     if(req.body.status.cmdType === 0){\n    //         global.set('cmdType', 'InverterOff');\n    //         global.set('inverterEnabel',true);\n            \n    //         if(req.body.activePowerDerating !== undefined){\n    //             global.set('invOffTimeReqType', 'activePowerDerating');\n    //         }\n            \n    //         if(req.body.reactivePowerDerating !== undefined){\n    //             global.set('invOffTimeReqType', 'reactivePowerDerating');\n    //         }\n            \n    //         if(req.body.activePowerDerating !== undefined && req.body.reactivePowerDerating !== undefined){\n    //             global.set('invOffTimeReqType', 'activePowerDerating_reactivePowerDerating');\n    //         }\n            \n    //         return msg;\n    //     }\n    // }\n    \n    // CASE 2 \n    // if(req.body.status !== undefined && req.body.activePowerDerating !== undefined && req.body.reactivePowerDerating !== undefined){\n    //     if(req.body.status.cmdType == 1){\n    //         global.set('cmdType', 'InverterOn');\n    //         global.set('inverterWrite', true);\n    //         return msg;\n    //     }\n    // }\n    \n    // CASE 3\n    // if(req.body.status !== undefined && req.body.activePowerDerating !== undefined){\n    //     if(req.body.status.cmdType == 1){\n    //         global.set('cmdType', 'inverterOn_and_activePowerDerating');\n    //         global.set('inverterEnabel', true);\n    //         return msg;\n    //     }\n    // }\n    \n    // CASE 4\n    // if(req.body.status !== undefined && req.body.reactivePowerDerating !== undefined){\n    //     if(req.body.status.cmdType == 1){\n    //         global.set('cmdType', 'inverterOn_and_reactivePowerDerating');\n    //         global.set('inverterEnabel', true);\n    //         return msg;\n    //     }\n    // }\n    \n    // CASE 5 \n    // if(req.body.activePowerDerating !== undefined && req.body.reactivePowerDerating !== undefined){\n    //     global.set('cmdType', 'activePowerDerating_and_reactivePowerDerating');\n    //     global.set('activePowerDerating_Enabel', true);\n    //     return msg;\n    // }\n    \n    // CASE 6\n    // if(req.body.activePowerDerating !== undefined){\n    //     global.set('cmdType', 'activePowerDerating');\n    //     global.set('activePowerDerating_Enabel', true);\n    //     return msg;\n    // }\n    \n    // CASE 7\n    // if(req.body.reactivePowerDerating !== undefined){\n    //     global.set('cmdType', 'reactivePowerDerating');\n    //     global.set('reactivePowerDerating_Enabel', true);\n    //     return msg;\n    // }\n    \n    // CASE 8 \n    // if(req.body.status !== undefined){\n    //     if(req.body.status.cmdType === 1){\n    //         global.set('cmdType', 'InverterOn');\n    //         global.set('inverterEnabel',true);\n    //         return msg;\n    //     }\n    // }\n}\n\nconst getSingleProfile = () => {\n        msg.URLServerProfile.forEach(element => {\n            if(element.deviceNo == deviceNumber && element.ip == ip){\n                global.set('URLServer_Profile', element);\n            }\n        })\n}\n\nfetchURLServerValue();\ncheckCommandPriority();\ngetSingleProfile();\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1481,"y":2060,"wires":[["2e27466a.273d4a","251aefb7.2b959"]]},{"id":"2e27466a.273d4a","type":"function","z":"f6cd98c9.0f3548","name":"","func":"var profile = global.get('URLServer_Profile');\nvar inverterWrite = global.get('inverterWrite');\nvar activePowerDeratingEnabel = global.get('activePowerDerating_Enabel');\nvar activePowerDeratingWrite = global.get('activePowerDerating_Write');\nvar reactivePowerDeratingEnabel = global.get('reactivePowerDerating_Enabel');\nvar reactivePowerDeratingWrite = global.get('reactivePowerDerating_Write');\n\nvar req = global.get('req');\nvar slaveId = profile.slaveId;\n\nvar cmdType = global.get('cmdType');\n\nglobal.set('stop_url_server_Loop', true);\n\nconst writeValue = (address, value) => {\n    node.warn(address)\n    node.warn(value)\n    msg.payload = { \n    value: value, \n    'fc': 6, \n    'unitid': slaveId, \n    'address': address,\n    'quantity': 1 \n}\n}\n\nif(cmdType == 'InverterOff'){\n    if(inverterWrite){\n        let onoffAddress = profile.status.onoffAddress;\n        let stopValue = profile.status.stopValue;\n        \n        writeValue(onoffAddress, stopValue);\n        global.set('allDone', true);\n    }\n}\n\n\nif(cmdType == 'InverterOn'){\n    \n    if(inverterWrite){\n        node.warn('inverter ON Write');\n        let onoffAddress = profile.status.onoffAddress;\n        let startValue = profile.status.startValue;\n        // let startValue = profile.status.stopValue;\n        \n        writeValue(onoffAddress, startValue);\n        global.set('allDone', true);\n    }\n\n    // if(activePowerDeratingWrite){\n    //     node.warn('activePowerDeratingWrite')\n    //     let percentAddress = profile.activePowerDerating.percentAddress;\n    //     let writableValue =  profile.activePowerDerating.percentScale * req.body.activePowerDerating.value;\n        \n    //     writeValue(percentAddress, writableValue);\n    //     global.set('inverterWrite', false);\n    //     global.set('activePowerDerating_Write', false);\n    //     global.set('reactivePowerDerating_Write', true);\n    // }\n\n    // if(reactivePowerDeratingWrite){\n    //     node.warn('reactivePowerDeratingWrite')\n    //     let percentAddress = profile.reactivePowerDerating.percentAddress;\n    //     let writableValue = profile.reactivePowerDerating.percentScale * req.body.reactivePowerDerating.value;\n    //     writeValue(percentAddress, writableValue);\n    //     global.set('allDone', true);\n    // }\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1658,"y":2060,"wires":[["8499d4c3.9379d8"]]},{"id":"cb32e9ce.649008","type":"function","z":"f6cd98c9.0f3548","name":"Display URL Server ","func":"var profile = global.get('URLServer_Profile');\nvar inverterWrite = global.get('inverterWrite');\nvar activePowerDeratingWrite = global.get('activePowerDerating_Write');\nvar reactivePowerDeratingWrite = global.get('reactivePowerDerating_Write');\n\nvar cmdType = global.get('cmdType');\nvar allDone = global.get('allDone');\n\nconst sendResponse = (res) => {\n    global.set('http_PLC_response', res);\n}\n\nconst resetGlobalVariable = () => {\n    global.set('req', null);\n    global.set('isInverterOnCmd', null);\n    global.set('isInverterOFFCmd', null);\n    global.set('URLServer_Profile', null);\n    global.set('inverterWrite', null);\n    global.set('activePowerDerating_Write', null);\n    global.set('reactivePowerDerating_Write', null);\n    global.set('allDone', null);\n    global.set('invOffTimeReqType', null);\n    global.set('stop_url_server_Loop', false);\n}\n\nif(cmdType == 'InverterOff'){\n    if(allDone){\n        let res = {\n            data: {\n                status: {\n                    success: true,\n                    msg: 'Inverter off seccessfully'\n                }\n            }\n        }\n        sendResponse(res);\n        resetGlobalVariable();\n    }\n}\n\n\nif(cmdType == 'InverterOn'){\n    \n    // if(inverterWrite){\n    //     global.set('inverterWrite', false);\n    //     // global.set('activePowerDerating_Write', true);\n    // }\n    \n    if(allDone){\n        let res = {\n            data: {\n                status: {\n                    success: true,\n                    msg: 'Inverter on seccessfully'\n                }\n            }\n        }\n        sendResponse(res);\n        resetGlobalVariable();\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":2028,"y":2060,"wires":[["59de812f.3e961"]]},{"id":"8499d4c3.9379d8","type":"modbus-flex-write","z":"f6cd98c9.0f3548","name":"192.168.1.10","showStatusActivities":true,"showErrors":true,"server":"4563b4d4.6da41c","emptyMsgOnFail":false,"keepMsgProperties":false,"x":1811,"y":2060,"wires":[["cb32e9ce.649008"],[]]},{"id":"1dedb6a5.6f6af9","type":"complete","z":"f6cd98c9.0f3548","name":"","scope":["cb32e9ce.649008"],"uncaught":false,"x":1128,"y":2139,"wires":[["1c18b32.698a44d"]]},{"id":"1c18b32.698a44d","type":"switch","z":"f6cd98c9.0f3548","name":"Stop URL Server Loop","property":"stop_url_server_Loop","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1321,"y":2139,"wires":[["c44aabb1.08e5b8"]]},{"id":"c44aabb1.08e5b8","type":"delay","z":"f6cd98c9.0f3548","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1513,"y":2139,"wires":[["ad8779f.9b93588"]]},{"id":"ad8779f.9b93588","type":"function","z":"f6cd98c9.0f3548","name":"","func":"node.warn('--------')\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1676,"y":2139,"wires":[[]]},{"id":"59de812f.3e961","type":"debug","z":"f6cd98c9.0f3548","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2228,"y":2059,"wires":[]},{"id":"a7ec49ea.2d4148","type":"comment","z":"f6cd98c9.0f3548","name":"**************************************  URL Server for PLC  **************************************","info":"","x":1518,"y":1999,"wires":[]},{"id":"251aefb7.2b959","type":"delay","z":"f6cd98c9.0f3548","name":"","pauseType":"delay","timeout":"700","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1948,"y":2139,"wires":[["1ffabf3a.f8b561"]]},{"id":"1ffabf3a.f8b561","type":"function","z":"f6cd98c9.0f3548","name":"","func":"const response = global.get('http_PLC_response');\nglobal.set('cmdType', null);\nglobal.set('http_PLC_response', null);\nmsg.payload = response;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":2138,"y":2139,"wires":[["6d8924af.65497c"]]},{"id":"6d8924af.65497c","type":"http response","z":"f6cd98c9.0f3548","name":"","statusCode":"","headers":{},"x":2308,"y":2139,"wires":[]},{"id":"df95b00.07f735","type":"http in","z":"f6cd98c9.0f3548","name":"","url":"/rs-485","method":"post","upload":false,"swaggerDoc":"","x":130,"y":1040,"wires":[["9b9a170f.0729a8","46269940.d68d88"]]},{"id":"27112e8f.9bb092","type":"change","z":"f6cd98c9.0f3548","name":"192.168.1.10","rules":[{"t":"set","p":"reset","pt":"msg","to":"1","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":880,"wires":[["25898648.c2754a"]]},{"id":"96f21f78.9e0ac","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"IP","propertyType":"msg","rules":[{"t":"eq","v":"192.168.1.10","vt":"str"},{"t":"eq","v":"192.168.1.20","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":654,"y":1040,"wires":[["27112e8f.9bb092","3fb0361a.7ad28a"],["28e12de1.fd1222","3fb0361a.7ad28a"]]},{"id":"c0ffbce2.78abc","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"IP","propertyType":"msg","rules":[{"t":"eq","v":"192.168.1.10","vt":"str"},{"t":"eq","v":"192.168.1.20","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":975,"y":1040,"wires":[["3d0b06ee.ebb62a"],["e578bea5.40bf5"]]},{"id":"8ae0ffba.500d2","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-1 ON OFF","property":"stop_to_read_deviceProfile_1","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":557.2857666015625,"y":804,"wires":[["d818b4eb.25dc88"]]},{"id":"3d0b06ee.ebb62a","type":"modbus-flex-write","z":"f6cd98c9.0f3548","name":"192.168.1.10","showStatusActivities":true,"showErrors":true,"server":"807ea69b.2727d8","emptyMsgOnFail":false,"keepMsgProperties":false,"x":1135,"y":1013,"wires":[["7524d994.11a868"],[]]},{"id":"e578bea5.40bf5","type":"modbus-flex-write","z":"f6cd98c9.0f3548","name":"192.168.1.20","showStatusActivities":true,"showErrors":true,"server":"afa9dd41.df22f","emptyMsgOnFail":false,"keepMsgProperties":false,"x":1139,"y":1065,"wires":[["7524d994.11a868"],[]]},{"id":"28e12de1.fd1222","type":"change","z":"f6cd98c9.0f3548","name":"192.168.1.20","rules":[{"t":"set","p":"reset","pt":"msg","to":"1","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":922,"wires":[["2daeec7a.8bfb94"]]},{"id":"5baf552d.1191fc","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-2 ON OFF","property":"stop_to_read_deviceProfile_2","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":556,"y":864,"wires":[["30d952f1.a3b9be"]]},{"id":"8dabedfe.3dad1","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-2 ON OFF","property":"stop_to_read_deviceProfile_2","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":542,"y":579,"wires":[["30d952f1.a3b9be"]]},{"id":"f2dbde49.cb3f9","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-2 ON OFF","property":"stop_to_read_deviceProfile_2","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1400,"y":719,"wires":[["89fafd0c.74ed"]]},{"id":"7155af1.c39825","type":"switch","z":"f6cd98c9.0f3548","name":"Dp-1 ON OFF","property":"stop_to_read_deviceProfile_1","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1399,"y":656,"wires":[["f276f013.4913d"]]},{"id":"3076d98c.3fd8c6","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"IP","propertyType":"msg","rules":[{"t":"eq","v":"192.168.1.10","vt":"str"},{"t":"eq","v":"192.168.1.20","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":1611,"y":1029,"wires":[["d818b4eb.25dc88"],["30d952f1.a3b9be"]]},{"id":"bc519a10.33e878","type":"inject","z":"f6cd98c9.0f3548","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":140,"y":680,"wires":[["6173f123.bede6"]]},{"id":"59f490dd.9a2ff","type":"switch","z":"f6cd98c9.0f3548","name":"","property":"IP","propertyType":"msg","rules":[{"t":"eq","v":"192.168.1.10","vt":"str"},{"t":"eq","v":"192.168.1.20","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":885,"y":1220,"wires":[["d818b4eb.25dc88"],["30d952f1.a3b9be"]]},{"id":"bfdc20b5.32d52","type":"delay","z":"f6cd98c9.0f3548","name":"","pauseType":"delay","timeout":"1000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":732,"y":1220,"wires":[["59f490dd.9a2ff"]]},{"id":"46269940.d68d88","type":"change","z":"f6cd98c9.0f3548","name":"","rules":[{"t":"set","p":"reset","pt":"msg","to":"1","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":155,"y":440,"wires":[["aca3beec.0e2e1","da2d7d91.245a7"]]},{"id":"b901d282.3d2d6","type":"switch","z":"f6cd98c9.0f3548","name":"Stop on http request","property":"stop_on_http_request","propertyType":"global","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":338,"y":140,"wires":[["e9c31517.129628"]]},{"id":"ae2cbeef.9915f","type":"function","z":"f6cd98c9.0f3548","name":"","func":"const ishttpReqErr = global.get('http_request_error');\n\nif(ishttpReqErr){\n    msg.statusCode= 400;\n    msg.payload = global.get('http_RS_485_errorResponse');\n    global.set('http_request_error', null);\n    global.set('http_RS_485_errorResponse', null);\n    global.set('cmdType', null);\n}else{\n    msg.statusCode = 200;\n    msg.payload = global.get('http_RS_485_successResponse');\n    global.set('http_RS_485_successResponse', null);\n    global.set('cmdType', null);\n}\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1340,"y":1160,"wires":[["5b431c0f.7f6574"]]},{"id":"5b431c0f.7f6574","type":"http response","z":"f6cd98c9.0f3548","name":"","statusCode":"","headers":{},"x":1474,"y":1160,"wires":[]},{"id":"899c1efa.5df15","type":"delay","z":"f6cd98c9.0f3548","name":"","pauseType":"delay","timeout":"2000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1178,"y":1160,"wires":[["ae2cbeef.9915f"]]},{"id":"fc0ec678.cf0118","type":"modbus-client","z":"","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"tcpHost":"192.168.1.10","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"10","clientTimeout":"350","reconnectOnTimeout":true,"reconnectTimeout":"500","parallelUnitIdsAllowed":true},{"id":"ed7d5af5.114f58","type":"modbus-client","z":"","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"tcpHost":"192.168.1.20","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"1","clientTimeout":"1000","reconnectOnTimeout":true,"reconnectTimeout":"2000","parallelUnitIdsAllowed":true},{"id":"4563b4d4.6da41c","type":"modbus-client","z":"","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"tcpHost":"192.168.1.10","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"25","clientTimeout":"350","reconnectOnTimeout":true,"reconnectTimeout":"500","parallelUnitIdsAllowed":true},{"id":"807ea69b.2727d8","type":"modbus-client","z":"","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"tcpHost":"192.168.1.10","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"25","clientTimeout":"1000","reconnectOnTimeout":true,"reconnectTimeout":"2000","parallelUnitIdsAllowed":true},{"id":"afa9dd41.df22f","type":"modbus-client","z":"","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"tcpHost":"192.168.1.20","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","unit_id":"1","commandDelay":"1","clientTimeout":"1000","reconnectOnTimeout":true,"reconnectTimeout":"2000","parallelUnitIdsAllowed":true}]